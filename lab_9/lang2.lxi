%option noyywrap

%{
#include <stdio.h>
#include <string.h>
#include "lex.tab.h"
#include <math.h>
int lines = 0;
%}

DIGIT           [0-9]
STRING          \"({LETTER}|{DIGIT})*\"
NUMBER          [+-]?[1-9][0-9]*|0
CONSTANT        {STRING}|{NUMBER}
LETTER          [a-zA-z]
IDENTIFIER      {LETTER}({LETTER}|{DIGIT})*

%%

"START"         {printf( "Reserved word: %s\n", yytext); return START;}
"read"          {printf( "Reserved word: %s\n", yytext); return READ;}
"write"         {printf( "Reserved word: %s\n", yytext); return WRITE;}
"if"            {printf( "Reserved word: %s\n", yytext); return IF;}
"else"          {printf( "Reserved word: %s\n", yytext); return ELSE;}
"for"           {printf( "Reserved word: %s\n", yytext); return FOR;}
"while"         {printf( "Reserved word: %s\n", yytext); return WHILE;}
"break"         {printf( "Reserved word: %s\n", yytext); return BREAK;}
"int"           {printf( "Reserved word: %s\n", yytext); return INT;}
"string"        {printf( "Reserved word: %s\n", yytext); return STRING;}
"char"          {printf( "Reserved word: %s\n", yytext); return CHAR;}
"array"         {printf( "Reserved word: %s\n", yytext); return ARRAY;}
"return"        {printf( "Reserved word: %s\n", yytext); return RETURN;}

{IDENTIFIER} {printf( "Identifier: %s\n", yytext); return IDENTIFIER;}
{CONSTANT} {printf( "Constant: %s\n", yytext); return CONSTANT;}

"("     {printf( "Separator: %s\n", yytext); return OPEN_ROUND_BRACKET;}
")"     {printf( "Separator: %s\n", yytext); return CLOSED_ROUND_BRACKET;}
"{"     {printf( "Separator: %s\n", yytext); return OPEN_CURLY_BRACKET;}
"}"     {printf( "Separator: %s\n", yytext); return CLOSED_CURLY_BRACKET;}
","     {printf( "Separator: %s\n", yytext); return COMMA;}
";"     {printf( "Separator: %s\n", yytext); return SEMI_COLON;}
"["     {printf( "Separator: %s\n", yytext); return OPEN_RIGHT_BRACKET;}
"]"     {printf( "Separator: %s\n", yytext); return CLOSED_RIGHT_BRACKET;}
"+"     {printf( "Operator: %s\n", yytext); return ADD;}
"-"     {printf( "Operator: %s\n", yytext); return SUB;}
"*"     {printf( "Operator: %s\n", yytext); return MUL;}
"/"     {printf( "Operator: %s\n", yytext); return DIV;}
"%"     {printf( "Operator: %s\n", yytext); return MODULO;}
"<"     {printf( "Operator: %s\n", yytext); return LESS_THAN;}
"<="    {printf( "Operator: %s\n", yytext); return LESS_OR_EQUAL_THAN;}
">"     {printf( "Operator: %s\n", yytext); return MORE_THAN;}
">="    {printf( "Operator: %s\n", yytext); return MORE_OR_EQUAL_THAN;}
"=="    {printf( "Operator: %s\n", yytext); return EQUALS;}
"!="    {printf( "Operator: %s\n", yytext); return NOT_EQUALS;}
"&&"    {printf( "Operator: %s\n", yytext); return AND;}
"||"    {printf( "Operator: %s\n", yytext); return OR;}
"!"     {printf( "Operator: %s\n", yytext); return NOT;}
"="     {printf( "Operator: %s\n", yytext); return ASSIGN;}

[ \t]+ {}
[\n]+ {lines++;}

[+-]?0[0-9]*                    {printf("Illegal integer\n"); return -1;}
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   {printf("Illegal identifier\n"); return -1;}
.                               {printf("Lexical error\n"); return -1;}

%%